{-# LANGUAGE OverloadedStrings #-}
import CodeWorld

wall, ground, storage, box, player :: Picture
wall =    colored grey (solidRectangle 1 1)
ground =  colored yellow     (solidRectangle 1 1)
storage = solidCircle 0.3 & ground
box =     colored brown      (solidRectangle 1 1)
player = colored red (solidRectangle 0.4 0.4)

data Tile = Wall | Ground | Storage | Box | Blank deriving Eq

drawTile :: Tile -> Picture
drawTile Wall    = wall
drawTile Ground  = ground
drawTile Storage = storage
drawTile Box     = box
drawTile Blank   = blank

pictureOfMaze :: Picture
pictureOfMaze = draw21times (\r -> draw21times (\c -> drawTileAt r c))

draw21times :: (Integer -> Picture) -> Picture
draw21times something = go (-10)
  where
    go :: Integer -> Picture
    go 11 = blank
    go n  = something n & go (n+1)

drawTileAt :: Integer -> Integer -> Picture
drawTileAt r c = translated (fromIntegral r) (fromIntegral c) (drawTile (maze (C r c)))
         
maze :: Coord -> Tile 
maze (C x y)
  | abs x > 4  || abs y > 4  = Blank
  | abs x == 4 || abs y == 4 = Wall
  | x ==  2 && y <= 0        = Wall
  | x ==  3 && y <= 0        = Storage
  | x >= -2 && y == 0        = Box
  | otherwise                = Ground

data Direction = R | U | L | D deriving Eq

data Coord = C Integer Integer


initialPlayerCoord :: Coord
initialPlayerCoord = C (-3) (-3)

fixedMazeCoord :: Coord
fixedMazeCoord = C 0 0

atCoord :: Coord -> Picture -> Picture
atCoord (C x y) pic = translated (fromIntegral x) (fromIntegral y) pic

nextOrStay :: Coord -> Coord -> Coord
nextOrStay next stay
  | tile == Ground || tile == Storage = next
  | otherwise = stay
  where tile = maze next

adjacentCoord :: Direction -> Coord -> Coord
adjacentCoord dir (C x y) =
  nextOrStay next stay 
   where 
     next
       | dir == R = (C (x + 1) y)
       | dir == U = (C x (y + 1))
       | dir == L = (C (x - 1) y)
       | dir == D = (C x (y - 1))
     stay = (C x y)
    

handleEvent :: Event -> Coord -> Coord
handleEvent (KeyPress key) c
    | key == "Right" = adjacentCoord R c
    | key == "Up"    = adjacentCoord U c
    | key == "Left"  = adjacentCoord L c
    | key == "Down"  = adjacentCoord D c
    | otherwise      = c
handleEvent _ c      = c


drawState :: Coord -> Picture
drawState c = atCoord c player & atCoord fixedMazeCoord pictureOfMaze

main :: IO ()
main = activityOf initialPlayerCoord handleEvent drawState

